{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useRef } from 'react';\nexport default function useMostClickedColor(color) {\n  _s();\n\n  const [mostClicked, setMostClicked] = useState(null);\n  const [clickedCounterState, setClickedCounterState] = useState(null);\n  const colorMostPicked = useRef();\n  const setClickedCounter = useCallback(() => {\n    setClickedCounterState(clickedCounterState + 1);\n\n    if (clickedCounterState > mostClicked) {\n      setMostClicked(clickedCounterState);\n      colorMostPicked.current = color;\n    }\n  }, [clickedCounterState, mostClicked, color]);\n  return {\n    mostClicked,\n    setClickedCounter,\n    colorMostPicked: colorMostPicked.current\n  };\n}\n\n_s(useMostClickedColor, \"281e7xb/DYYi+WgxIN5sUagKwdQ=\");","map":{"version":3,"sources":["/Users/brunonabais/Present Technologies/my-app/src/hooks/useMostClickedColor.js"],"names":["useState","useCallback","useRef","useMostClickedColor","color","mostClicked","setMostClicked","clickedCounterState","setClickedCounterState","colorMostPicked","setClickedCounter","current"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,QAA8C,OAA9C;AAEA,eAAe,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAC/C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACO,mBAAD,EAAsBC,sBAAtB,IAAgDR,QAAQ,CAAC,IAAD,CAA9D;AACA,QAAMS,eAAe,GAAGP,MAAM,EAA9B;AAEA,QAAMQ,iBAAiB,GAAGT,WAAW,CAAC,MAAM;AACxCO,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;;AACA,QAAIA,mBAAmB,GAAGF,WAA1B,EAAuC;AACnCC,MAAAA,cAAc,CAACC,mBAAD,CAAd;AACAE,MAAAA,eAAe,CAACE,OAAhB,GAA0BP,KAA1B;AACH;AACJ,GANoC,EAMlC,CAACG,mBAAD,EAAsBF,WAAtB,EAAmCD,KAAnC,CANkC,CAArC;AAQA,SAAO;AAAEC,IAAAA,WAAF;AAAeK,IAAAA,iBAAf;AAAkCD,IAAAA,eAAe,EAAEA,eAAe,CAACE;AAAnE,GAAP;AACH;;GAduBR,mB","sourcesContent":["import { useState, useCallback, useRef } from 'react';\n\nexport default function useMostClickedColor(color) {\n    const [mostClicked, setMostClicked] = useState(null);\n    const [clickedCounterState, setClickedCounterState] = useState(null);\n    const colorMostPicked = useRef();\n\n    const setClickedCounter = useCallback(() => {\n        setClickedCounterState(clickedCounterState + 1);\n        if (clickedCounterState > mostClicked) {\n            setMostClicked(clickedCounterState);\n            colorMostPicked.current = color;\n        }\n    }, [clickedCounterState, mostClicked, color]);\n\n    return { mostClicked, setClickedCounter, colorMostPicked: colorMostPicked.current };\n}\n"]},"metadata":{},"sourceType":"module"}